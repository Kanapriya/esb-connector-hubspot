<?xml version="1.0" encoding="UTF-8"?>
<!--
   Copyright (c) 2005-2015, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.

   WSO2 Inc. licenses this file to you under the Apache License,
   Version 2.0 (the "License"); you may not use this file except
   in compliance with the License.
   You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing,
   software distributed under the License is distributed on an
   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
   KIND, either express or implied. See the License for the
   specific language governing permissions and limitations
   under the License.
-->
<!-- Create a campaign and mailing list in ActiveCampaign API. -->
<proxy xmlns="http://ws.apache.org/ns/synapse" name="hubSpot_createCampaignAndMailingList" transports="https,http" statistics="disable" trace="disable" startOnLoad="true">
   <target>
      <inSequence onError="faultHandlerSeq">

         <!-- ActiveCampaign parameters. -->
         <property name="activeCampaign.apiUrl" expression="json-eval($.activeCampaign.apiUrl)" />
         <property name="activeCampaign.apiKey" expression="json-eval($.activeCampaign.apiKey)" />

         <property name="activeCampaign.campaign.format" expression="json-eval($.activeCampaign.campaign.format)" />
         <property name="activeCampaign.campaign.fromEmail" expression="json-eval($.activeCampaign.campaign.fromEmail)" />
         <property name="activeCampaign.campaign.fromName" expression="json-eval($.activeCampaign.campaign.fromName)" />
         <property name="activeCampaign.campaign.replyTo" expression="json-eval($.activeCampaign.campaign.replyTo)" />
         <property name="activeCampaign.campaign.listId" expression="json-eval($.activeCampaign.campaign.listId)" />
         <property name="activeCampaign.campaign.type" expression="json-eval($.activeCampaign.campaign.type)" />
         <property name="activeCampaign.campaign.name" expression="json-eval($.activeCampaign.campaign.name)" />
         <property name="activeCampaign.campaign.subject" expression="json-eval($.activeCampaign.campaign.subject)" />
         <property name="activeCampaign.campaign.emailTextContent" expression="json-eval($.activeCampaign.campaign.emailTextContent)" />
         <property name="activeCampaign.campaign.priority" expression="json-eval($.activeCampaign.campaign.priority)" />
         <property name="activeCampaign.campaign.charset" expression="json-eval($.activeCampaign.campaign.charset)" />
         <property name="activeCampaign.campaign.encoding" expression="json-eval($.activeCampaign.campaign.encoding)" />
         <property name="activeCampaign.campaign.htmlConstructor" expression="json-eval($.activeCampaign.campaign.htmlConstructor)" />
         <property name="activeCampaign.campaign.html" expression="json-eval($.activeCampaign.campaign.html)" />
         <property name="activeCampaign.campaign.htmlFetch" expression="json-eval($.activeCampaign.campaign.htmlFetch)" />
         <property name="activeCampaign.campaign.htmlFetchWhen" expression="json-eval($.activeCampaign.campaign.htmlFetchWhen)" />
         <property name="activeCampaign.campaign.textFetch" expression="json-eval($.activeCampaign.campaign.textFetch)" />
         <property name="activeCampaign.campaign.textFetchWhen" expression="json-eval($.activeCampaign.campaign.textFetchWhen)" />
         <property name="activeCampaign.campaign.isPublic" expression="json-eval($.activeCampaign.campaign.isPublic)" />
         <property name="activeCampaign.campaign.trackLinks" expression="json-eval($.activeCampaign.campaign.trackLinks)" />

         <property name="activeCampaign.mailingList.toName" expression="json-eval($.activeCampaign.mailingList.toName)" />
         <property name="activeCampaign.mailingList.senderAddr1" expression="json-eval($.activeCampaign.mailingList.senderAddress)" />
         <property name="activeCampaign.mailingList.senderZip" expression="json-eval($.activeCampaign.mailingList.senderZip)" />
         <property name="activeCampaign.mailingList.subscriptionNotifyList" expression="json-eval($.activeCampaign.mailingList.subscriptionNotifyList)" />
         <property name="activeCampaign.mailingList.senderCountry" expression="json-eval($.activeCampaign.mailingList.senderCountry)" />
         <property name="activeCampaign.mailingList.senderName" expression="json-eval($.activeCampaign.mailingList.senderName)" />
         <property name="activeCampaign.mailingList.unsubscriptionNotifyList" expression="json-eval($.activeCampaign.mailingList.unsubscriptionNotifyList)" />
         <property name="activeCampaign.mailingList.senderCity" expression="json-eval($.activeCampaign.mailingList.senderCity)" />
         <property name="activeCampaign.mailingList.senderUrl" expression="json-eval($.activeCampaign.mailingList.senderUrl)" />
         <property name="activeCampaign.mailingList.carbonCopyList" expression="json-eval($.activeCampaign.mailingList.carbonCopyList)" />
         <property name="activeCampaign.mailingList.bounceId" expression="json-eval($.activeCampaign.mailingList.bounceId)" />
         <property name="activeCampaign.mailingList.senderReminder" expression="json-eval($.activeCampaign.mailingList.senderReminder)" />
         <property name="activeCampaign.mailingList.stringId" expression="json-eval($.activeCampaign.mailingList.stringId)" />



         <script language="js">
         <![CDATA[                     
            var listId = "" + mc.getProperty("activeCampaign.campaign.listId");  
            var payload = {};  
            payload ["p[" +listId+"]"] = listId;           
            mc.setPayloadJSON(payload);    
         ]]>
         </script>
         <property name="activeCampaign.campaign.listDetails" expression="json-eval($.)" />

         <!-- Create Email message. -->
         <activecampaign.init>
            <apiUrl>{$ctx:activeCampaign.apiUrl}</apiUrl>
            <apiKey>{$ctx:activeCampaign.apiKey}</apiKey>
            <apiOutput>json</apiOutput>
         </activecampaign.init>
         <activecampaign.createMessage>
            <format>{$ctx:activeCampaign.campaign.format}</format>
            <subject>{$ctx:activeCampaign.campaign.subject}</subject>
            <fromEmail>{$ctx:activeCampaign.campaign.fromEmail}</fromEmail>
            <fromName>{$ctx:activeCampaign.campaign.fromName}</fromName>
            <replyTo>{$ctx:activeCampaign.campaign.replyTo}</replyTo>
            <priority>{$ctx:activeCampaign.campaign.priority}</priority>
            <charset>{$ctx:activeCampaign.campaign.charset}</charset>
            <encoding>{$ctx:activeCampaign.campaign.encoding}</encoding>
            <htmlConstructor>{$ctx:activeCampaign.campaign.htmlConstructor}</htmlConstructor>
            <html>{$ctx:activeCampaign.campaign.html}</html>
            <htmlFetch>{$ctx:activeCampaign.campaign.htmlFetch}</htmlFetch>
            <htmlFetchWhen>{$ctx:activeCampaign.campaign.htmlFetchWhen}</htmlFetchWhen>
            <textConstructor>editor</textConstructor>
            <text>{$ctx:activeCampaign.campaign.emailTextContent}</text>
            <textFetch>{$ctx:activeCampaign.campaign.textFetch}</textFetch>
            <textFetchWhen>{$ctx:activeCampaign.campaign.textFetchWhen}</textFetchWhen>
            <listIds>{$ctx:activeCampaign.campaign.listDetails}</listIds>
         </activecampaign.createMessage>
         <property name="activeCampaign.message.id" expression="//jsonObject/id/text()" />
         <property name="activeCamapign.result.code" expression="//jsonObject/result_code/text()" />

         <!-- Check Email message created. -->
         <filter xpath="get-property('activeCamapign.result.code') = 0">
            <then>
               <property name="id" value="{}" />
               <property name="status" value="error" />
               <property name="message" expression="//jsonObject/result_message/text()" />
               <call-template target="responseHandlerTemplate">
                  <with-param name="activity" value="activeCampaign_createMessage" />
                  <with-param name="id" value="{$ctx:id}" />
                  <with-param name="status" value="{$ctx:status}" />
                  <with-param name="message" value="{$ctx:message}" />
               </call-template>
               <loopback />
            </then>
         </filter>


         <script language="js">
         <![CDATA[         
            //Construct message and list deatils.
            
            var messageId = mc.getProperty("activeCampaign.message.id");
            var listDetails = mc.getProperty("activeCampaign.campaign.listDetails");     
            var payload = eval('(' + listDetails + ')');  
            payload ["m[" +messageId+"]"] = "100";           
            mc.setPayloadJSON(payload);    
         ]]>
         </script>
         <property name="activeCampaign.campaign.listDetails" expression="json-eval($.)" />
         <property name="activeCampaign.campaign.sendDate" expression="get-property('SYSTEM_DATE', 'yyyy-MM-dd HH:mm:ss')" />

         <!-- Workaround to eliminate the Host header issue in ActiveCampaign. -->
         <property name="Host" value="host.wso2.com" scope="transport" />

         <!-- Create campaign. -->
         <activecampaign.init>
            <apiUrl>{$ctx:activeCampaign.apiUrl}</apiUrl>
            <apiKey>{$ctx:activeCampaign.apiKey}</apiKey>
            <apiOutput>json</apiOutput>
         </activecampaign.init>
         <activecampaign.createCampaign>
            <type>{$ctx:activeCampaign.campaign.type}</type>
            <name>{$ctx:activeCampaign.campaign.name}</name>
            <sdate>{$ctx:activeCampaign.campaign.sendDate}</sdate>
            <isStatusScheduled>1</isStatusScheduled>
            <isPublic>{$ctx:activeCampaign.campaign.isPublic}</isPublic>
            <trackLinks>{$ctx:activeCampaign.campaign.trackLinks}</trackLinks>
            <listDetails>{$ctx:activeCampaign.campaign.listDetails}</listDetails>
         </activecampaign.createCampaign>
         <property name="activeCamapign.result.code" expression="//jsonObject/result_code/text()" />
         <!-- Check Email message created. -->
         <filter xpath="get-property('activeCamapign.result.code') = 0">
            <then>
               <property name="id" value="{}" />
               <property name="status" value="error" />
               <property name="message" expression="//jsonObject/result_message/text()" />
               <call-template target="responseHandlerTemplate">
                  <with-param name="activity" value="activeCampaign_createMessage" />
                  <with-param name="id" value="{$ctx:id}" />
                  <with-param name="status" value="{$ctx:status}" />
                  <with-param name="message" value="{$ctx:message}" />
               </call-template>
               <loopback />
            </then>
         </filter>


         <property name="activeCampaign.campaign.id" expression="//jsonObject/id/text()" />
         <property name="id" expression="fn:concat('activeCampaign_campaignId:', get-property('activeCampaign.campaign.id'))" />
         <call-template target="responseHandlerTemplate">
            <with-param name="activity" value="activeCampaign_createCampaign" />
            <with-param name="id" value="{$ctx:id}" />
            <with-param name="status" value="success" />
            <with-param name="message" value="Campaign has been successfully created." />
         </call-template>

         <!-- Workaround to eliminate the Host header issue in ActiveCampaign. -->
         <property name="Host" value="host.wso2.com" scope="transport" />
         <!-- Create mailing List. -->
         <activecampaign.init>
            <apiUrl>{$ctx:activeCampaign.apiUrl}</apiUrl>
            <apiKey>{$ctx:activeCampaign.apiKey}</apiKey>
            <apiOutput>json</apiOutput>
         </activecampaign.init>
         <activecampaign.createMailingList>
            <toName>{$ctx:activeCampaign.mailingList.toName}</toName>
            <senderAddr1>{$ctx:activeCampaign.mailingList.senderAddr1}</senderAddr1>
            <senderZip>{$ctx:activeCampaign.mailingList.senderZip}</senderZip>
            <subscriptionNotifyList>{$ctx:activeCampaign.mailingList.subscriptionNotifyList}</subscriptionNotifyList>
            <senderCountry>{$ctx:activeCampaign.mailingList.senderCountry}</senderCountry>
            <senderName>{$ctx:activeCampaign.mailingList.senderName}</senderName>
            <unsubscriptionNotifyList>{$ctx:activeCampaign.mailingList.unsubscriptionNotifyList}</unsubscriptionNotifyList>
            <senderCity>{$ctx:activeCampaign.mailingList.senderCity}</senderCity>
            <name>{$ctx:activeCampaign.name}</name>
            <senderUrl>{$ctx:activeCampaign.mailingList.senderUrl}</senderUrl>
            <carbonCopyList>{$ctx:activeCampaign.mailingList.carbonCopyList}</carbonCopyList>
            <bounceId>{$ctx:activeCampaign.mailingList.bounceId}</bounceId>
            <senderReminder>{$ctx:activeCampaign.mailingList.senderReminder}</senderReminder>
            <stringId>{$ctx:activeCampaign.mailingList.stringId}</stringId>
         </activecampaign.createMailingList>

         <property name="activeCamapign.result.code" expression="//jsonObject/result_code/text()" />

         <!-- Check MailingList is created. -->
         <filter xpath="get-property('activeCamapign.result.code') = 0">
            <then>
               <property name="id" value="{}" />
               <property name="status" value="error" />
               <property name="message" expression="//jsonObject/result_message/text()" />
               <call-template target="responseHandlerTemplate">
                  <with-param name="activity" value="activeCampaign_createMailingList" />
                  <with-param name="id" value="{$ctx:id}" />
                  <with-param name="status" value="{$ctx:status}" />
                  <with-param name="message" value="{$ctx:message}" />
               </call-template>
               <loopback />
            </then>
         </filter>

         <property name="activeCampaignListId" expression="//jsonObject/id/text()" />
         <property name="id" expression="fn:concat('activeCampaign_listId:', get-property('activeCampaignListId'))" />
         <call-template target="responseHandlerTemplate">
            <with-param name="activity" value="activeCampaign_createMailingList" />
            <with-param name="id" value="{$ctx:id}" />
            <with-param name="status" value="success" />
            <with-param name="message" value="Mailing list has been successfully created." />
         </call-template>
         <loopback />

      </inSequence>
      <outSequence>

         <payloadFactory media-type="json">
            <format>{ "Response":{ "process":"hubSpot_createCampaignAndMailingList", "activityResponse":[$1] } }
            </format>
            <args>
               <arg expression="get-property('operation','responseString')" />
            </args>
         </payloadFactory>
         <property name="messageType" value="application/json" scope="axis2" />
         <send />

      </outSequence>
   </target>
   <description />
</proxy>